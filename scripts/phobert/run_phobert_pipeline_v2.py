#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
PhoBERT Pipeline V2 - Complete training pipeline v·ªõi d·ªØ li·ªáu t·ª´ simple_dataset
Updated ƒë·ªÉ s·ª≠ d·ª•ng:
- Input: simple_dataset/ 
- Processed data: data-bert-v2/
- Model output: checkpoints/phobert-{base|large}-v2/
"""

import subprocess
import sys
import os

def check_prerequisites():
    """Ki·ªÉm tra c√°c ƒëi·ªÅu ki·ªán ti√™n quy·∫øt"""
    print("SEARCH: Ki·ªÉm tra ƒëi·ªÅu ki·ªán ti√™n quy·∫øt...")
    
    # Ki·ªÉm tra d·ªØ li·ªáu ngu·ªìn
    if not os.path.exists('simple_dataset'):
        print("ERROR: Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c simple_dataset!")
        print("TIP: ƒê·∫£m b·∫£o c√≥ th∆∞ m·ª•c simple_dataset v·ªõi train/val/test")
        return False
    
    # Ki·ªÉm tra c·∫•u tr√∫c d·ªØ li·ªáu
    required_dirs = ['train', 'val', 'test']
    for split in required_dirs:
        split_dir = os.path.join('simple_dataset', split)
        if not os.path.exists(split_dir):
            print(f"ERROR: Kh√¥ng t√¨m th·∫•y {split_dir}!")
            return False
        
        csv_file = os.path.join(split_dir, f'{split}.csv')
        if not os.path.exists(csv_file):
            print(f"ERROR: Kh√¥ng t√¨m th·∫•y {csv_file}!")
            return False
    
    print("SUCCESS: D·ªØ li·ªáu ngu·ªìn OK")
    return True

def run_preprocessing():
    """Ch·∫°y preprocessing cho PhoBERT V2"""
    print("\n" + "="*60)
    print("DATA: B∆Ø·ªöC 1: PREPROCESSING D·ªÆ LI·ªÜU")
    print("="*60)
    
    cmd = ['python', 'preprocess_for_phobert.py']
    
    try:
        print("PROCESS: ƒêang ch·∫°y preprocessing...")
        print(f"STATS: Command: {' '.join(cmd)}")
        subprocess.run(cmd, check=True)
        print("SUCCESS: Preprocessing ho√†n th√†nh!")
        return True
    except subprocess.CalledProcessError as e:
        print(f"ERROR: Preprocessing th·∫•t b·∫°i: {e}")
        return False
    except KeyboardInterrupt:
        print("‚èπÔ∏è Preprocessing b·ªã d·ª´ng b·ªüi user")
        return False

def run_training(model_type='base', use_wandb=False, epochs=5, batch_size=16):
    """Ch·∫°y training PhoBERT V2"""
    print(f"\n" + "="*60)
    print(f"START: B∆Ø·ªöC 2: TRAINING PHOBERT-{model_type.upper()}-V2")
    print("="*60)
    
    # X√°c ƒë·ªãnh model name v√† output directory
    if model_type == 'base':
        model_name = 'vinai/phobert-base'
        output_dir = 'checkpoints/phobert-base-v2'
        learning_rate = '8e-6'
        dropout_rate = '0.35'
        freeze_layers = '6'
        grad_accumulation = '4'
        actual_batch_size = batch_size
    else:  # large
        model_name = 'vinai/phobert-large'
        output_dir = 'checkpoints/phobert-large-v2'
        learning_rate = '5e-6'
        dropout_rate = '0.45'
        freeze_layers = '10'
        grad_accumulation = '8'
        actual_batch_size = max(4, batch_size // 2)
    
    cmd = [
        'python', 'train_phobert.py',
        '--model_name', model_name,
        '--data_dir', 'data-bert-v2',
        '--output_dir', output_dir,
        '--epochs', str(epochs),
        '--batch_size', str(actual_batch_size),
        '--learning_rate', learning_rate,
        '--weight_decay', '0.01',
        '--warmup_ratio', '0.2',
        '--scheduler', 'cosine',
        '--loss_type', 'f1',
        '--dropout_rate', dropout_rate,
        '--num_freeze_layers', freeze_layers,
        '--gradient_accumulation_steps', grad_accumulation,
        '--pooling_strategy', 'cls_mean',
        '--use_amp',
        '--use_ema',
        '--ema_decay', '0.9999',
        '--patience', '8'
    ]
    
    if use_wandb:
        cmd.extend(['--use_wandb', '--wandb_project', 'phobert-clickbait-v2'])
    
    try:
        print(f"START: B·∫Øt ƒë·∫ßu training {model_type}...")
        print(f"STATS: Config: {epochs} epochs, batch={actual_batch_size}, lr={learning_rate}")
        print(f"üìÅ Output: {output_dir}")
        print(f"STATS: Command: {' '.join(cmd)}")
        
        subprocess.run(cmd, check=True)
        print(f"SUCCESS: Training {model_type} ho√†n th√†nh!")
        return True
    except subprocess.CalledProcessError as e:
        print(f"ERROR: Training {model_type} th·∫•t b·∫°i: {e}")
        return False
    except KeyboardInterrupt:
        print(f"‚èπÔ∏è Training {model_type} b·ªã d·ª´ng b·ªüi user")
        return False

def run_evaluation(model_type='base'):
    """Ch·∫°y evaluation cho model ƒë√£ train"""
    print(f"\n" + "="*60)
    print(f"TEST: B∆Ø·ªöC 3: EVALUATION PHOBERT-{model_type.upper()}-V2")
    print("="*60)
    
    # ƒê∆∞·ªùng d·∫´n model v√† d·ªØ li·ªáu
    if model_type == 'base':
        model_name = 'vinai/phobert-base'
        model_path = 'checkpoints/phobert-base-v2/best_model.pth'
        data_path = 'data-bert-v2/phobert-base-v2/test_processed.pkl'
        output_dir = 'evaluation_results/phobert-base-v2'
    else:
        model_name = 'vinai/phobert-large'
        model_path = 'checkpoints/phobert-large-v2/best_model.pth'
        data_path = 'data-bert-v2/phobert-large-v2/test_processed.pkl'
        output_dir = 'evaluation_results/phobert-large-v2'
    
    # Ki·ªÉm tra file model c√≥ t·ªìn t·∫°i kh√¥ng
    if not os.path.exists(model_path):
        print(f"ERROR: Kh√¥ng t√¨m th·∫•y model: {model_path}")
        print("TIP: H√£y ch·∫°y training tr∆∞·ªõc khi evaluation")
        return False
    
    if not os.path.exists(data_path):
        print(f"ERROR: Kh√¥ng t√¨m th·∫•y test data: {data_path}")
        print("TIP: H√£y ch·∫°y preprocessing tr∆∞·ªõc khi evaluation")
        return False
    
    cmd = [
        'python', 'evaluate_phobert.py',
        '--model_path', model_path,
        '--model_name', model_name,
        '--data_path', data_path,
        '--output_dir', output_dir,
        '--batch_size', '32'
    ]
    
    try:
        print(f"TEST: ƒêang ƒë√°nh gi√° {model_type}...")
        print(f"üìÅ Model: {model_path}")
        print(f"üìÅ Data: {data_path}")
        print(f"üìÅ Output: {output_dir}")
        print(f"STATS: Command: {' '.join(cmd)}")
        
        subprocess.run(cmd, check=True)
        print(f"SUCCESS: Evaluation {model_type} ho√†n th√†nh!")
        return True
    except subprocess.CalledProcessError as e:
        print(f"ERROR: Evaluation {model_type} th·∫•t b·∫°i: {e}")
        return False
    except KeyboardInterrupt:
        print(f"‚èπÔ∏è Evaluation {model_type} b·ªã d·ª´ng b·ªüi user")
        return False

def main():
    print("=" * 80)
    print("MODEL: PHOBERT PIPELINE V2 - COMPLETE TRAINING SYSTEM")
    print("=" * 80)
    print("üìÅ Input data: simple_dataset/")
    print("üìÅ Processed data: data-bert-v2/")
    print("üìÅ Model output: checkpoints/phobert-{base|large}-v2/")
    print("=" * 80)
    
    # Ki·ªÉm tra ƒëi·ªÅu ki·ªán ti√™n quy·∫øt
    if not check_prerequisites():
        return
    
    print("\nCh·ªçn ch·∫ø ƒë·ªô ch·∫°y:")
    print("1. Full pipeline: Preprocessing + Training + Evaluation (Base)")
    print("2. Full pipeline: Preprocessing + Training + Evaluation (Large)")
    print("3. Full pipeline: Preprocessing + Training c·∫£ Base v√† Large")
    print("4. Ch·ªâ preprocessing")
    print("5. Ch·ªâ training (c·∫ßn preprocessing tr∆∞·ªõc)")
    print("6. Ch·ªâ evaluation (c·∫ßn model ƒë√£ train)")
    print("7. Ch·∫°y l·∫°i t·ª´ ƒë·∫ßu (x√≥a d·ªØ li·ªáu c≈©)")
    
    choice = input("\nNh·∫≠p l·ª±a ch·ªçn (1-7): ").strip()
    
    # C·∫•u h√¨nh
    print("\n=== C·∫§U H√åNH ===")
    try:
        epochs = int(input("S·ªë epochs (default: 5): ") or "5")
        batch_size = int(input("Batch size (default: 16): ") or "16")
    except ValueError:
        print("ERROR: Input kh√¥ng h·ª£p l·ªá, s·ª≠ d·ª•ng default values")
        epochs, batch_size = 5, 16
    
    use_wandb_input = input("S·ª≠ d·ª•ng wandb logging? (y/n, default: n): ").strip().lower()
    use_wandb = use_wandb_input in ['y', 'yes', '1']
    
    print(f"\nSTATS: C·∫•u h√¨nh:")
    print(f"   Epochs: {epochs}")
    print(f"   Batch size: {batch_size}")
    print(f"   Wandb: {'Yes' if use_wandb else 'No'}")
    
    confirm = input("\nB·∫Øt ƒë·∫ßu pipeline? (y/n): ").strip().lower()
    if confirm not in ['y', 'yes', '1']:
        print("ERROR: Pipeline cancelled")
        return
    
    success = True
    
    # X·ª≠ l√Ω theo l·ª±a ch·ªçn
    if choice == '7':
        # X√≥a d·ªØ li·ªáu c≈©
        print("\nüßπ X√≥a d·ªØ li·ªáu c≈©...")
        if os.path.exists('data-bert-v2'):
            import shutil
            shutil.rmtree('data-bert-v2')
            print("SUCCESS: ƒê√£ x√≥a data-bert-v2")
        choice = '1'  # Chuy·ªÉn v·ªÅ full pipeline
    
    if choice in ['1', '2', '3', '4']:
        # Ch·∫°y preprocessing
        success = run_preprocessing()
        if not success:
            return
    
    if choice in ['1', '2', '3', '5']:
        # Ch·∫°y training
        if choice == '1' or choice == '5':
            # Base model
            success = run_training('base', use_wandb, epochs, batch_size)
        elif choice == '2':
            # Large model
            success = run_training('large', use_wandb, epochs, batch_size)
        elif choice == '3':
            # C·∫£ hai models
            success = run_training('base', use_wandb, epochs, batch_size)
            if success:
                success = run_training('large', use_wandb, epochs, batch_size)
        
        if not success:
            return
    
    if choice in ['1', '2', '3', '6']:
        # Ch·∫°y evaluation
        if choice == '1' or choice == '6':
            # Base model
            success = run_evaluation('base')
        elif choice == '2':
            # Large model
            success = run_evaluation('large')
        elif choice == '3':
            # C·∫£ hai models
            success = run_evaluation('base')
            if success:
                success = run_evaluation('large')
    
    if success:
        print("\n" + "="*80)
        print("COMPLETE: PIPELINE HO√ÄN TH√ÄNH TH√ÄNH C√îNG!")
        print("="*80)
        print("üìÅ K·∫øt qu·∫£:")
        if os.path.exists('checkpoints/phobert-base-v2'):
            print("   SUCCESS: PhoBERT-Base-V2: checkpoints/phobert-base-v2/")
        if os.path.exists('checkpoints/phobert-large-v2'):
            print("   SUCCESS: PhoBERT-Large-V2: checkpoints/phobert-large-v2/")
        if os.path.exists('evaluation_results'):
            print("   SUCCESS: Evaluation results: evaluation_results/")
        print("\nTIP: ƒê·ªÉ test model:")
        print("   python evaluate_phobert.py --model_path checkpoints/phobert-base-v2/best_model.pth --model_name vinai/phobert-base --data_path data-bert-v2/phobert-base-v2/test_processed.pkl")
    else:
        print("\nERROR: Pipeline kh√¥ng ho√†n th√†nh do l·ªói")

if __name__ == "__main__":
    main() 