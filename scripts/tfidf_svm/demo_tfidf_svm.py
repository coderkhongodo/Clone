#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Demo script cho TF-IDF + SVM classifier
Test v·ªõi sample data ƒë·ªÉ ki·ªÉm tra t√≠nh nƒÉng
"""

import os
import sys
from train_tfidf_svm import TfIdfSVMClassifier, VietnameseTextPreprocessor

def test_preprocessor():
    """Test text preprocessing"""
    print("TEST: Testing Vietnamese Text Preprocessor...")
    
    # Sample texts
    sample_texts = [
        "B√†i vi·∫øt n√†y TH·∫¨T S·ª∞ s·∫Ω khi·∫øn b·∫°n b·∫•t ng·ªù!!!",
        "Tin HOT: 10 b√≠ m·∫≠t m√† b·∫°n KH√îNG TH·ªÇ TIN ƒê∆Ø·ª¢C",
        "B√°o c√°o ch√≠nh th·ª©c t·ª´ B·ªô Y t·∫ø v·ªÅ t√¨nh h√¨nh d·ªãch b·ªánh",
        "Nghi√™n c·ª©u m·ªõi cho th·∫•y hi·ªáu qu·∫£ c·ªßa vaccine"
    ]
    
    try:
        preprocessor = VietnameseTextPreprocessor()
        
        print("\nLOG: Sample preprocessing results:")
        for i, text in enumerate(sample_texts, 1):
            print(f"\n{i}. Original: {text}")
            
            # Test preprocessing steps
            processed = preprocessor.preprocess_text(text, filter_pos=True)
            print(f"   Processed: {processed}")
            
    except Exception as e:
        print(f"ERROR: Preprocessing test failed: {e}")
        print("TIP: C√≥ th·ªÉ VnCoreNLP ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t ho·∫∑c configured ƒë√∫ng")
        return False
    
    print("SUCCESS: Preprocessing test passed!")
    return True

def test_classifier_with_sample_data():
    """Test classifier v·ªõi sample data"""
    print("\nTEST: Testing TF-IDF + SVM Classifier...")
    
    # Sample data
    sample_texts = [
        "Tin s·ªëc s·∫Ω khi·∫øn b·∫°n b·∫•t ng·ªù v·ªÅ scandal ngh·ªá sƒ© n·ªïi ti·∫øng",
        "10 b√≠ m·∫≠t m√† b·∫°n kh√¥ng th·ªÉ tin ƒë∆∞·ª£c v·ªÅ cu·ªôc s·ªëng",
        "S·ª± th·∫≠t ƒë·∫±ng sau v·ª• vi·ªác s·∫Ω l√†m b·∫°n r√πng m√¨nh",
        "B√°o c√°o ch√≠nh th·ª©c t·ª´ B·ªô Y t·∫ø v·ªÅ t√¨nh h√¨nh d·ªãch COVID-19",
        "Nghi√™n c·ª©u khoa h·ªçc m·ªõi v·ªÅ hi·ªáu qu·∫£ vaccine ph√≤ng COVID-19",
        "Th√¥ng tin ch√≠nh th·ª©c t·ª´ Ch√≠nh ph·ªß v·ªÅ ch√≠nh s√°ch kinh t·∫ø",
        "K·∫øt qu·∫£ ƒëi·ªÅu tra c·ªßa c∆° quan ch·ª©c nƒÉng v·ªÅ v·ª• tai n·∫°n",
        "D·ªØ li·ªáu th·ªëng k√™ v·ªÅ t√¨nh h√¨nh kinh t·∫ø trong qu√Ω 3",
        "Tin th·ªÉ thao: ƒë·ªôi tuy·ªÉn Vi·ªát Nam th·∫Øng tr·∫≠n ƒë·∫•u quan tr·ªçng",
        "Th√¥ng b√°o v·ªÅ thay ƒë·ªïi gi·ªù l√†m vi·ªác c·ªßa c√°c c∆° quan h√†nh ch√≠nh"
    ]
    
    sample_labels = [
        "clickbait", "clickbait", "clickbait",
        "non-clickbait", "non-clickbait", "non-clickbait",
        "non-clickbait", "non-clickbait", "non-clickbait", "non-clickbait"
    ]
    
    try:
        # Initialize classifier
        classifier = TfIdfSVMClassifier(
            max_features=1000,  # Smaller cho demo
            ngram_range=(1, 2)
        )
        
        print(f"STATS: Sample data: {len(sample_texts)} texts")
        print(f"   Clickbait: {sample_labels.count('clickbait')}")
        print(f"   Non-clickbait: {sample_labels.count('non-clickbait')}")
        
        # Train v·ªõi sample data
        print("\nPROCESS: Training v·ªõi sample data...")
        classifier.train(
            sample_texts, sample_labels,
            val_texts=None, val_labels=None,
            grid_search=False  # Skip grid search cho demo
        )
        
        # Test predictions
        print("\nüîÆ Testing predictions:")
        test_texts = [
            "ƒêi·ªÅu b·∫•t ng·ªù s·∫Ω x·∫£y ra v·ªõi b·∫°n h√¥m nay",
            "B√°o c√°o t·ª´ B·ªô Gi√°o d·ª•c v·ªÅ k·∫ø ho·∫°ch nƒÉm h·ªçc m·ªõi",
            "10 s·ª± th·∫≠t s·ªëc v·ªÅ cu·ªôc s·ªëng m√† b·∫°n ch∆∞a bi·∫øt"
        ]
        
        predictions = classifier.predict(test_texts)
        probabilities = classifier.predict_proba(test_texts)
        
        for i, (text, pred, prob) in enumerate(zip(test_texts, predictions, probabilities)):
            print(f"\n{i+1}. Text: {text}")
            print(f"   Prediction: {pred}")
            print(f"   Probabilities: {prob}")
        
        # Feature importance (n·∫øu linear kernel)
        try:
            feature_importance = classifier.get_feature_importance(top_k=10)
            if feature_importance:
                print("\nSEARCH: Top features:")
                print("   Clickbait indicators:")
                for feature, score in feature_importance['top_positive'][:5]:
                    print(f"     {feature}: {score:.3f}")
                
                print("   Non-clickbait indicators:")
                for feature, score in feature_importance['top_negative'][:5]:
                    print(f"     {feature}: {score:.3f}")
        except Exception as e:
            print(f"WARNING: Feature importance error: {e}")
        
        print("SUCCESS: Classifier test passed!")
        return True
        
    except Exception as e:
        print(f"ERROR: Classifier test failed: {e}")
        return False

def main():
    print("=== TF-IDF + SVM DEMO ===")
    print("Demo script ƒë·ªÉ test c√°c t√≠nh nƒÉng c∆° b·∫£n")
    print()
    
    # Test 1: Preprocessor
    preprocessor_ok = test_preprocessor()
    
    if not preprocessor_ok:
        print("\nWARNING: Preprocessor test failed. B·∫°n v·∫´n c√≥ th·ªÉ ti·∫øp t·ª•c nh∆∞ng")
        print("   preprocessing c√≥ th·ªÉ kh√¥ng ho·∫°t ƒë·ªông optimal.")
        
        response = input("\nTi·∫øp t·ª•c v·ªõi classifier test? (y/n): ").lower()
        if response not in ['y', 'yes']:
            return
    
    # Test 2: Classifier
    test_classifier_with_sample_data()
    
    print("\nTARGET: Demo completed!")
    print("\nTIP: Next steps:")
    print("   1. Prepare your data in data/train/, data/val/, data/test/")
    print("   2. Run: python run_tfidf_svm.py")
    print("   3. Or: python train_tfidf_svm.py --data_dir data")

if __name__ == "__main__":
    # Ki·ªÉm tra dependencies
    missing_deps = []
    
    try:
        import sklearn
    except ImportError:
        missing_deps.append("scikit-learn")
    
    try:
        import pyvi
    except ImportError:
        missing_deps.append("pyvi")
    
    try:
        import matplotlib
        import seaborn
    except ImportError:
        missing_deps.append("matplotlib seaborn")
    
    if missing_deps:
        print("ERROR: Missing dependencies:")
        for dep in missing_deps:
            print(f"   pip install {dep}")
        print()
        print("Install dependencies v√† ch·∫°y l·∫°i script n√†y.")
        sys.exit(1)
    
    main() 